import { DataSet } from "./dynamicgraphutils";
import { DynamicGraph } from "./dynamicgraph";
import { DataManager, DataManagerOptions } from "./datamanager";
/** A collection of Networkcube's  global function availeble
 * through networkcube.myFunc()
 * */
/**
 * Returns the networkcube standard time format
 * @return {[type]} [description]
 */
export declare function timeFormat(): string;
declare global {
    interface Window {
        dataManager: DataManager;
    }
}
export declare function getSessionId(): string;
export declare function setDataManagerOptions(options: DataManagerOptions): void;
export declare function isSessionCached(session: string, dataSetName: string): boolean;
/**
 * Imports a data set into network cube.
 * @param  {string}  sessionName [description]
 * @param  {DataSet} data    [description]
 */
export declare function importData(sessionName: string, data: DataSet): void;
export declare function clearAllDataManagerSessionCaches(): void;
export declare function getDynamicGraph(dataName?: string, sessionName?: string): DynamicGraph;
export declare function openVisualizationWindow(session: string, visUri: string, dataName: string): void;
export declare function openVisualizationTab(session: string, visUri: string, dataName: string): void;
export declare function createTabVisualizations(parentId: string, visSpec: any[], session: string, dataName: string, width: number, height: number, visParams?: any): void;
export declare function switchVisTab(evt: any, visName: string): void;
export declare function createVisualizationIFrame(parentId: string, visUri: string, session: string, dataName: string, width: number, height: number, visParams?: any): HTMLIFrameElement | undefined;
export declare function getURLString(dataName: string): string;
export declare enum OrderType {
    Local = 0,
    Global = 1,
    Data = 2
}
export declare function isTrackingEnabled(): boolean;
export declare function isTrackingSet(): boolean;
export declare function deleteData(dataSetName: string): void;
