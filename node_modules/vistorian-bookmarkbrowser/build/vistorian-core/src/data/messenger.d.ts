import { ElementCompound } from "./utils";
import { Selection } from "./dynamicgraphutils";
import { Time, IDCompound } from "./dynamicgraph";
export declare const MESSAGE_HIGHLIGHT = "highlight";
export declare const MESSAGE_SELECTION = "selection";
export declare const MESSAGE_TIME_RANGE = "timeRange";
export declare const MESSAGE_SELECTION_CREATE = "createSelection";
export declare const MESSAGE_SELECTION_DELETE = "deleteSelection";
export declare const MESSAGE_SELECTION_SET_CURRENT = "setCurrentSelectionId";
export declare const MESSAGE_SELECTION_COLORING = "setSelectionColor";
export declare const MESSAGE_SELECTION_SET_COLORING_VISIBILITY = "selectionColoring";
export declare const MESSAGE_SELECTION_FILTER = "selectionFilter";
export declare const MESSAGE_SELECTION_PRIORITY = "selectionPriority";
export declare const MESSAGE_SEARCH_RESULT = "searchResult";
export declare const MESSAGE_SET_STATE = "SET_STATE";
export declare const MESSAGE_GET_STATE = "GET_STATE";
export declare const MESSAGE_STATE_CREATED = "STATE_CREATED";
export declare const MESSAGE_ZOOM_INTERACTION = "ZOOM_INTERACTION";
export declare const MESSAGE_CENTER_VIEW_ON_SELECTION = "CENTER_VIEW";
export declare function addEventListener(messageType: string, handler: (m: any) => any): void;
export declare function setDefaultEventListener(handler: (m: any) => any): void;
export declare class Message {
    id: number;
    type: string;
    body: any;
    constructor(type: string);
}
export declare function sendMessage(type: string, body: any): void;
export declare function highlight(action: string, elementCompound?: ElementCompound, msg?: string): void;
export declare class HighlightMessage extends Message {
    action: string;
    idCompound: IDCompound;
    msg: string;
    constructor(action: string, idCompound?: IDCompound, msg?: string);
}
export declare function selection(action: string, compound: ElementCompound, selectionId?: number): void;
export declare class SelectionMessage extends Message {
    action: string;
    selectionId: number;
    idCompound: IDCompound;
    constructor(action: string, idCompound: IDCompound, selectionId?: number);
}
export declare function timeRange(startUnix: number, endUnix: number, single: Time, propagate?: boolean): void;
export declare class TimeRangeMessage extends Message {
    startUnix: number;
    endUnix: number;
    constructor(start: number, end: number);
}
export declare function createSelection(type: string, name: string): Selection;
export declare class CreateSelectionMessage extends Message {
    selection: Selection;
    constructor(b: Selection);
}
export declare function setCurrentSelection(b: Selection): void;
export declare class SetCurrentSelectionIdMessage extends Message {
    selectionId: number;
    constructor(b: Selection);
}
export declare function showSelectionColor(selection: Selection, showColor: boolean): void;
export declare class ShowSelectionColorMessage extends Message {
    selectionId: number;
    showColor: boolean;
    constructor(selection: Selection, showColor: boolean);
}
export declare function filterSelection(selection: Selection, filter: boolean): void;
export declare class FilterSelectionMessage extends Message {
    selectionId: number;
    filter: boolean;
    constructor(selection: Selection, filter: boolean);
}
export declare function swapPriority(s1: Selection, s2: Selection): void;
export declare class SelectionPriorityMessage extends Message {
    selectionId1: number;
    selectionId2: number;
    priority1: number;
    priority2: number;
    constructor(s1: Selection, s2: Selection, p1: number, p2: number);
}
export declare function deleteSelection(selection: Selection): void;
export declare class DeleteSelectionMessage extends Message {
    selectionId: number;
    constructor(selection: Selection);
}
export declare function setSelectionColor(s: Selection, color: string): void;
export declare function centerViewOnSelection(selection: Selection): void;
export declare class CenterViewMessage extends Message {
    selectionId: number;
    constructor(selection: Selection);
}
export declare function search(term: string, type?: string): void;
export declare class SearchResultMessage extends Message {
    idCompound: IDCompound;
    searchTerm: string;
    constructor(searchTerm: string, idCompound: IDCompound);
}
export declare class NetworkControls {
    networkType: string;
    timeSliderStart: number;
    timeSliderEnd: number;
    constructor(networkType: string, startTime: number, endTime: number);
}
export declare class NodeLinkControls extends NetworkControls {
    globalZoom: number;
    panOffsetLocal: number[];
    panOffsetGlobal: number[];
    linkOpacity: number;
    nodeOpacity: number;
    nodeSize: number;
    edgeGap: number;
    linkWidth: number;
    labellingType: number;
    constructor(networkType: string, startTime: number, endTime: number, globalZoom: number, panOffsetLocal: number[], panOffsetGlobal: number[], linkOpacity: number, nodeOpacity: number, nodeSize: number, edgeGap: number, linkWidth: number, labellingType: number);
}
export declare class MatrixControls extends NetworkControls {
    labellingType: string;
    zoom: number;
    constructor(networkType: string, startTime: number, endTime: number, zoom: number, labellingType: string);
}
export declare class TimeArchsControls extends NetworkControls {
    labellingType: string;
    constructor(networkType: string, startTime: number, endTime: number, labellingType: string);
}
export declare class MapControls extends NetworkControls {
    nodeOverlap: number;
    linkOpacity: number;
    opacityOfPositionlessNodes: number;
    constructor(networkType: string, startTime: number, endTime: number, nodeOverlap: number, linkOpacity: number, opacityOfPositionlessNodes: number);
}
export declare class SetStateMessage extends Message {
    state: NetworkControls;
    viewType: string;
    constructor(state: NetworkControls, viewType: string);
}
export declare function setState(state: NetworkControls, viewType: string): void;
export declare class GetStateMessage extends Message {
    bookmarkIndex: number;
    viewType: string;
    isNewBookmark: boolean;
    typeOfMultiView: string;
    constructor(bookmarkIndex: number, viewType: string, isNewBookmark: boolean, typeOfMultiView: string);
}
export declare function getState(bookmarkIndex: number, viewType: string, isNewBookmark: boolean, typeOfMultiView: string): void;
export declare class StateCreatedMessage extends Message {
    state: NetworkControls;
    bookmarkIndex: number;
    viewType: string;
    isNewBookmark: boolean;
    typeOfMultiView: string;
    constructor(state: NetworkControls, bookmarkIndex: number, viewType: string, isNewBookmark: boolean, typeOfMultiView: string);
}
export declare function stateCreated(state: NetworkControls, bookmarkIndex: number, viewType: string, isNewBookmark: boolean, typeOfMultiView: string): void;
export declare class ZoomInteractionMessage extends Message {
    visType: string;
    ineractionType: string;
    constructor(visType: string, ineractionType: string);
}
export declare function zoomInteraction(visType: string, ineractionType: string): void;
export declare function distributeMessage(message: Message, ownView?: boolean): void;
