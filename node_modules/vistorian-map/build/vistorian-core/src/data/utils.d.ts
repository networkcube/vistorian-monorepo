import { BasicElement, Time, IDCompound, DynamicGraph, NodePair, Node, Link } from "./dynamicgraph";
export { formatAtGranularity, formatTimeAtGranularity } from "./dates";
import { Selection } from "./dynamicgraphutils";
export declare function getType(elements: any[]): string | undefined;
export declare function makeElementCompound(elements: IDCompound, g: DynamicGraph): ElementCompound;
export declare class ElementCompound {
    nodes: Node[];
    links: Link[];
    times: Time[];
    nodePairs: NodePair[];
    locations: Location[];
}
export declare function getPriorityColor(element: BasicElement): string | undefined;
export declare function sortByPriority(s1: Selection, s2: Selection): number;
export declare function getUrlVars(): Record<string, any>;
export declare function capitalizeFirstLetter(string: string): string;
export declare function isBefore(t1: Time, t2: Time): boolean;
export declare function isAfter(t1: Time, t2: Time): boolean;
export declare function hex2Rgb(hex: string): number[];
export declare function hex2web(v: string): string;
export declare function hex2RgbNormalized(hex: string): number[];
export declare function areEqualShallow(a: any, b: any): boolean;
export declare function compareTypesShallow(a: any, b: any): boolean;
export declare function copyArray<TElement>(arr: any[], ctorFunc: () => TElement): TElement[];
export declare class Box {
    x1: number;
    x2: number;
    y1: number;
    y2: number;
    constructor(x1: number, y1: number, x2: number, y2: number);
    get width(): number;
    get height(): number;
    isPoint(): boolean;
}
export declare function inBox(x: number, y: number, box: Box): boolean;
export declare function isSame(a: any[], b: any[]): boolean;
export declare function cloneCompound(compound: IDCompound): IDCompound;
export declare function makeIdCompound(elements: ElementCompound | undefined): IDCompound;
export declare function arraysEqual(a: any, b: any): boolean;
export declare function encapsulate(array: any[], attrName?: string): Record<string, any>[];
export declare function isPointInPolyArray(poly: number[][], pt: number[]): boolean;
export declare function downloadPNGFromCanvas(name: string): void;
export declare function getBlobFromSVG(name: string, svgId: string, callback?: (blob: any, name: string) => void): void;
export declare function getBlobFromSVGNode(name: string, svgNode: any, callback: (blob: any, name: string) => void, backgroundColor?: string): void;
export declare function getBlobFromSVGString(name: string, svgString: string, width: number, height: number, callback: (blob: Blob, name: string) => void, backgroundColor?: string): void;
export declare function getSVGString(svgNode: any): string;
export declare function exportPNG(canvas: HTMLCanvasElement, name: string): void;
export declare function showMessage(message: string, timeout: number): void;
