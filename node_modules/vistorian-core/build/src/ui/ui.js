import { Slider } from "./slider";
export function makeSlider(d3parent, // BEFORE d3.Selection<d3.BaseType, {}, HTMLElement, any>,
label, width, height, value, min, max, handler) {
    const slider = new Slider(5, height - 5, width, min, max, 0.01);
    const svg = d3parent
        .append("svg")
        .attr("width", width + 20)
        .attr("height", height);
    svg
        .append("text")
        .attr("x", 10)
        .attr("y", height - 15)
        .text(label)
        .style("user-select", "none")
        .attr("class", "sliderLabel");
    slider.appendTo(svg);
    slider.set(value);
    slider.setDragEndCallBack(handler);
}
export class RadioButton {
    constructor(color, text) {
        this.checked = false;
        this.text = "";
        this.RADIUS = 7;
        this.clickHandler = () => null; // BEFORE Function;
        this.color = color;
        if (text)
            this.text = text;
    }
    appendTo(x, y, svg) {
        const g = svg
            .append("g")
            .attr("transform", "translate(" + x + "," + y + ")");
        this.circle = g
            .append("circle")
            .attr("r", this.RADIUS)
            .attr("fill", "#ffffff")
            .attr("stroke", this.color)
            .attr("stroke-width", 1)
            .attr("cx", this.RADIUS * 2)
            .attr("cy", 0)
            .attr("oninput", "trace.event('vis_4',document.location.pathname,this.parentElement.previousElementSibling.innerHTML ,'cx' + this.getAttribute('cx'))")
            .attr("onmouseup", "trace.event('vis_4',document.location.pathname,this.parentElement.previousElementSibling.innerHTML ,'cx' + this.getAttribute('cx'))");
        if (this.text) {
            this.label = g
                .append("text")
                .attr("x", this.RADIUS * 1.4)
                .attr("y", 5)
                .style("font-family", "Helvetica")
                .style("font-size", "9pt")
                .style("user-select", "none")
                .text(this.text[0])
                .on("click", () => {
                this.checked = !this.checked;
                if (this.checked) {
                    this.circle.attr("fill", this.color);
                    this.label.attr("fill", "#ffffff");
                }
                else {
                    this.circle.attr("fill", "#ffffff");
                    this.label.attr("fill", this.color);
                }
                if (this.clickHandler) {
                    this.clickHandler();
                }
            });
        }
    }
    isChecked() {
        return this.checked;
    }
    addClickHandler(f) {
        this.clickHandler = f;
    }
}
export function makeCheckBox(d3parent, label, callback) {
    d3parent.append("input").attr("type", "checkbox").on("change", callback);
    d3parent
        .append("b")
        .attr("class", "sliderLabel")
        .style("user-select", "none")
        .html(label);
}
export function makeButton(d3parent, label, callback) {
    d3parent
        .append("input")
        .attr("type", "button")
        .attr("value", label)
        .on("click", callback);
}
//# sourceMappingURL=ui.js.map