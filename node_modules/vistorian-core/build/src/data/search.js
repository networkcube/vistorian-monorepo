import { IDCompound } from "./dynamicgraph";
export function searchForTerm(term, dgraph, type) {
    const terms = term.toLowerCase().split(",");
    const result = new IDCompound();
    for (let i = 0; i < terms.length; i++) {
        term = terms[i].trim();
        if (!type || type == "node")
            result.nodeIds = result.nodeIds.concat(dgraph
                .nodes()
                .filter((e) => e.label().toLowerCase().indexOf(term) > -1 ||
                e.nodeType().toLowerCase().indexOf(term) > -1)
                .ids());
        if (!type || type == "link")
            result.linkIds = result.linkIds.concat(dgraph
                .links()
                .filter((e) => e.source.label().toLowerCase().indexOf(term) > -1 ||
                e.target.label().toLowerCase().indexOf(term) > -1 ||
                e.linkType().indexOf(term) > -1)
                .ids());
        if (!type || type == "locations")
            result.locationIds = result.locationIds.concat(dgraph
                .locations()
                .filter((e) => e.label().toLowerCase().indexOf(term) > -1)
                .ids());
    }
    return result;
}
//# sourceMappingURL=search.js.map