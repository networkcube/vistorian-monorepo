// namespace networkcube {
/* moved from utils to datamanager */
export function isValidIndex(v) {
    return v != undefined && v > -1;
}
/* moved from dynamicgraph to datamanager */
export class Selection {
    constructor(id, acceptedType) {
        this.color = "#3366cc"; // INIT??
        this.showColor = true;
        this.filter = false;
        this.priority = 0;
        this.id = id;
        this.name = "Selection-" + this.id;
        this.elementIds = [];
        this.acceptedType = acceptedType;
        this.priority = id;
    }
    acceptsType(type) {
        return this.acceptedType == type;
    }
}
// data set / graph with name
export class DataSet {
    // constructor(name:string, nodeTable:any[], linkTable:any[], nodeSchema:NodeSchema, linkSchema:LinkSchema, locationTable?:any, locationSchema?:LocationSchema){
    constructor(params) {
        this.locationTable = [];
        this.selections = []; //predefined selections (not link type)
        this.timeFormat = ""; // INIT?????????????
        // before without any
        this.name = params.name;
        this.nodeTable = params.nodeTable;
        this.linkTable = params.linkTable;
        this.directed = params.directed;
        if (params.nodeSchema == undefined)
            this.nodeSchema = getDefaultNodeSchema();
        else
            this.nodeSchema = params.nodeSchema;
        if (params.linkSchema == undefined)
            this.linkSchema = getDefaultLinkSchema();
        else
            this.linkSchema = params.linkSchema;
        if (params.locationTable != undefined)
            this.locationTable = params.locationTable;
        if (params.locationSchema == undefined)
            this.locationSchema = getDefaultLocationSchema();
        else
            this.locationSchema = params.locationSchema;
        console.log("[n3] data set created", this);
    }
}
export function getDefaultNodeSchema() {
    return new NodeSchema(0);
}
export function getDefaultLinkSchema() {
    return new LinkSchema(0, 1, 2);
}
export function getDefaultLocationSchema() {
    return new LocationSchema(0, 1, 2, 3, 4, 5, 6, 7, 8);
}
export class TableSchema {
    constructor(name) {
        this.name = name;
    }
}
// default node schema for node table
export class NodeSchema extends TableSchema {
    constructor(id) {
        super("nodeSchema");
        /* INIT ?????????????????? */
        this.label = -1;
        this.time = -1;
        this.location = -1;
        this.nodeType = -1;
        this.shape = -1;
        this.color = -1;
        this.id = id;
    }
}
// default node schema for link table
export class LinkSchema extends TableSchema {
    constructor(id, source, target) {
        super("linkSchema");
        this.weight = -1; // INIT????????
        this.linkType = -1;
        this.directed = -1;
        this.time = -1;
        this.source = source;
        this.target = target;
        this.id = id;
    }
}
export class LocationSchema extends TableSchema {
    constructor(id, label, geoname, longitude, latitude, x, y, z, radius) {
        super("locationSchema");
        this.geoname = -1; // actual geo name (english)
        this.longitude = -1;
        this.latitude = -1;
        this.x = -1;
        this.y = -1;
        this.z = -1;
        this.radius = -1;
        this.id = id;
        this.label = label;
        if (isValidIndex(geoname))
            this.geoname = geoname != undefined ? geoname : -1; // geoname never will be undefined at this point
        if (isValidIndex(longitude))
            this.longitude = longitude != undefined ? longitude : -1;
        if (isValidIndex(latitude))
            this.latitude = latitude != undefined ? latitude : -1;
        if (isValidIndex(x))
            this.x = x != undefined ? x : -1;
        if (isValidIndex(y))
            this.y = y != undefined ? y : -1;
        if (isValidIndex(z))
            this.z = z != undefined ? z : -1;
        if (isValidIndex(radius))
            this.radius = radius != undefined ? radius : -1;
    }
}
//}
//# sourceMappingURL=dynamicgraphutils.js.map